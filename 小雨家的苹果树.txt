Description
小雨的家乡在青岛，那里景色优美。小雨的家中种了很多的苹果树，假设苹果树分布在x轴上，每一个点 最多只能有一个苹果树，但是苹果树上面可以有很多个苹果，但是不能一个苹果都没有。刚开始的时候小雨站在原点处，他可以选择向右走或者向左走，一旦下雨确定了向哪个方向走，他将一直从这个方向走下去，直到碰见一个没有拜访的苹果树 ，然后小雨摘光这个苹果树上面的苹果，然后掉头向相反方向走去，直到再碰见一个另外一个没有拜访过的苹果树，然后接着掉头。如果在他走的方向上已经没有没被拜访过的苹果树他将一直走下去。问小雨最多可以摘多少个苹果。

Input
一个正整数T代表有T组数据。

然后每一组数据有一个正整数n代表小雨家有多少苹果树，然后下面的n行包括

 xi, ai (-10^5≤xi≤10^5, xi≠10^5, 1≤ai≤10^5), 代表每一个苹果树的坐标以及这个苹果树上面有多少个苹果。

保证没有苹果树在原点上面。

Output
每组数据输出一个数代表小雨做多能收集到多少个苹果。

Sample Input
2
2
-1 5
1 5
3
-2 2
1 4
-1 3
Sample Output
10
9




#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<string.h>
#include<math.h>
using namespace std;
#define N 100005
struct node
{
    int x,a;
}p[N];
bool cmp(node a,node b)
{
    return a.x<b.x;
}
int main()
{
    int t;
    scanf ("%d",&t);
    while(t--)
    {
        int n;
        scanf ("%d",&n);
        int x=0,y=0;
        for (int i=1;i<=n;i++)
            {
                scanf ("%d%d",&p[i].x,&p[i].a);
                if (p[i].x<0)
                    x++;
                else
                    y++;
            }
        sort(p+1,p+1+n,cmp);//根据坐标进行一下排序
        int sum=0;
        if (x==y)//负坐标和正坐标数一样多，所有坐标苹果都能拿
        {
            for (int i=1;i<=n;i++)
                sum+=p[i].a;
            printf ("%d\n",sum);
        }
        else if (x==0)
            printf ("%d\n",p[1].a);
        else if (y==0)
            printf ("%d\n",p[n].a);
        else//不一样多，双方坐标各拿最少坐标数的苹果
        {
            int p1,q1;
            for (int i=1;i<=n;i++)
            {
                if (p[i].x<0&&p[i+1].x>0)
                {
                    p1=i;
                    q1=i+1;
                }
            }
            if (x>y)
            {
                for (int i=q1;i<=n;i++)
                    sum+=p[i].a;
                for (int i=p1;i>=p1-y;i--)
                    sum+=p[i].a;
            }
            else
            {
                for (int i=p1;i>=1;i--)
                    sum+=p[i].a;
                for (int i=q1;i<=q1+x;i++)
                    sum+=p[i].a;
            }
            printf ("%d\n",sum);
        }
    }
    return 0;
}
